package org.bhave.sweeper.experiment;

import java.io.File;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Properties;

import org.apache.commons.configuration.Configuration;
import org.apache.commons.configuration.ConfigurationException;
import org.apache.commons.configuration.PropertiesConfiguration;
import org.bhave.sweeper.CombinedParameterSweep;
import org.bhave.sweeper.ParameterSweep;
import org.bhave.sweeper.ParameterSweepUtil;
import org.bhave.sweeper.impl.DoubleSequenceSweep;
import org.bhave.sweeper.impl.IntegerSequenceSweep;
import org.bhave.sweeper.impl.ListSweep;
import org.bhave.sweeper.impl.SingleValueSweep;
import org.bhave.sweeper.impl.SweepLoader;

/**
 * <p>
 * An experiment is an entity capable of loading experiment configuration files
 * and controlling the flow of an experiment using an {@link ExperimentRunner}
 * to dispatch {@link Configurable} objects. Typically, it transforms the
 * experiment configuration file into an {@link CombinedParameterSweep}, it
 * should also be capable of receiving a Configurable Prototype object, apply
 * the multiple {@link Configuration} instances (generated by the
 * {@link CombinedParameterSweep}) and run these Configurable objects using an
 * experiment runner.
 * </p>
 * 
 * <h3>Experiment Configuration Files</h3>
 * <p>
 * You can configure an experiment using an experiment configuration file. The
 * files use the typical {@link Properties} syntax. In this case, advanced
 * features are available as we use the {@link PropertiesConfiguration} class to
 * load the experiment parameters.
 * </p>
 * <h4>Experiment Configuration File Syntax</h4>
 * <p>
 * The experiment configuration file should contain the following elements:
 * <ul>
 * <li>euid = experiment-2D5G-1.2 #some uid that identifies this experiment,
 * this can be whathever you want
 * <li>runs = 30 #number of runs that should be used for each combination of
 * parameters
 * 
 * 
 * </ul>
 * for the parameter sweep syntax see the documentation of {@link SweepLoader}
 * since this is used to load the parameter space.
 * </p>
 * 
 * 
 * 
 * 
 * @author Davide Nunes
 */
public class Experiment {
	public static final String P_EUID = "euid";

	// experiment conviguration
	private Model modelPrototype;
	private ExperimentRunner runner;
	private Configuration expConfig;
	private String uid;

	private CombinedParameterSweep parameterSapce;
	private int runs;

	private Experiment() {
	};

	public Experiment fromFile(String filename) {
		Experiment experiment = new Experiment();

		File configFile = new File(filename);
		try {
			experiment.expConfig = new PropertiesConfiguration(configFile);
		} catch (ConfigurationException cfge) {
			throw new RuntimeException(
					"Experiment configuration file is not properly formated");
		}
		experiment.uid = experiment.expConfig.getString(P_EUID);
		if (experiment.uid == null) {
			throw new RuntimeException(
					"Experiment configuration file does not contain an experiment unique id, please provide one using \" euid = some unique experiment name");
		}

		// list to store the parameter sweeps
		SweepLoader sweepLoader = new SweepLoader();
		List<ParameterSweep> sweeps = sweepLoader.fromFile(configFile);

		// read runs (defaults to 1)
		experiment.runs = 1;

		if (experiment.expConfig.containsKey("runs")) {
			int numRuns = experiment.expConfig.getInt("runs");
			if (numRuns >= 1)
				experiment.runs = numRuns;
		}

		// create combined parameter sweep
		experiment.parameterSapce = ParameterSweepUtil.createCombinedSweep(
				sweeps, experiment.runs);

		// read model and runner prototype
		if (experiment.expConfig.containsKey("model")
				&& experiment.expConfig.containsKey("runner")) {

			String modelPrototype = experiment.expConfig.getString("model");
			String runner = experiment.expConfig.getString("runner");

			try {
				Class<?> modelClass = Class.forName(modelPrototype);
				Class<?> runnerClass = Class.forName(runner);

				experiment.modelPrototype = (Model) modelClass.newInstance();
				experiment.runner = (ExperimentRunner) runnerClass
						.newInstance();

			} catch (Exception e) {
				throw new RuntimeException(e.getMessage());
			}

		} else {
			throw new RuntimeException(
					"Please specify the model prototype and the runner  classes");
		}
		return experiment;
	}

}
